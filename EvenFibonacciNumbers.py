# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# from math import sqrt




# n = 0
# fib = 0 
# sumEven = 0
# if __name__ == "__main__":
    # # while True:
    # while n < 33:
        # n += 1
        # fib = int(((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5)) )
        # if (fib % 2 == 0):
            # sumEven += fib
            # print(fib)
    # print(fib)
    # print(n)
                
sum = 0
def fib():
    a,b = 0, 1
    while True:
        yield a
        a,b = b,a+b
        
for index, fibonacci_number in zip(range(35), fib()):
    print('{i:3}: {f:3}'.format(i=index, f=fibonacci_number))
    if (fibonacci_number % 2 ==0):
        sum += fibonacci_number
print(sum)
 